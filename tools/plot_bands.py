#!/usr/bin/env python
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

qmap = range(9, 600)[::-1]

subset3_model = {
    'band_3_100k': {
        'covars': [[[1.87830696, -0.02633960], [-0.02633960, 0.00790116]],
                   [[0.80090079, -0.03031900], [-0.03031900, 0.00663336]],
                   [[0.23996509, -0.01464024], [-0.01464024, 0.00377612]]],
        'weights': [0.49322534, 0.33561316, 0.17116148],
        'means': [[8.49124235, 0.27950974], [10.78564216, 0.28769877], [6.01311807, 0.37891437]]
    },
    'band_4_100k': {
        'covars': [[[2.55098237, 0.03105353], [0.03105353, 0.00889719]],
                   [[1.45565578, -0.01474065], [-0.01474065, 0.00591197]],
                   [[0.41279128, -0.01119424], [-0.01119424, 0.00549940]]],
        'weights': [0.33513905, 0.35131978, 0.31354115],
        'means': [[6.05679184, 0.34525164], [7.80945480, 0.32161935], [4.56975574, 0.39848885]]
    },
    'band_5_100k': {
        'covars': [[[0.21538640, -0.00679856], [-0.00679856, 0.00151230]],
                   [[1.62916048, -0.01331399], [-0.01331399, 0.00263552]],
                   [[0.65455896, 0.09502065], [0.09502065, 0.02100684]]],
        'weights': [0.36090557, 0.62807659, 0.01101782],
        'means': [[4.95640857, 0.38727385], [7.30576486, 0.33546288], [2.29861687, 0.34816062]]
    },
    'band_7_100k': {
        'covars': [[[2.17034478, -0.02121268], [-0.02121268, 0.00956782]],
                   [[0.48241774, -0.03905355], [-0.03905355, 0.00716446]],
                   [[0.79364381, -0.03225618], [-0.03225618, 0.00780748]]],
        'weights': [0.48026720, 0.15001958, 0.36971320],
        'means': [[9.79251895, 0.29650337], [6.82619544, 0.36933740], [12.04481596, 0.31843904]]
    },
    'band_8_100k': {
        'covars': [[[0.21881586, -0.00744368], [-0.00744368, 0.00526885]],
                   [[0.93369796, -0.02400595], [-0.02400595, 0.00703819]],
                   [[2.88032230, -0.02159395], [-0.02159395, 0.00822088]]],
        'weights': [0.17916546, 0.27779640, 0.54303813],
        'means': [[5.42608850, 0.41478154], [10.01771887, 0.35583415], [7.45517659, 0.35293037]]
    },
    'band_9_100k': {
        'covars': [[[2.61526483, -0.01848557], [-0.01848557, 0.00284182]],
                   [[0.09264036, -0.00336592], [-0.00336592, 0.00132651]],
                   [[0.70219357, 0.00619432], [0.00619432, 0.00298790]]],
        'weights': [0.53229608, 0.19721506, 0.27048884],
        'means': [[7.88393599, 0.38734689], [6.08126750, 0.43535414], [10.12060103, 0.37049154]]
    },
    'band_10_100k': {
        'covars': [[[0.21747518, -0.00552380], [-0.00552380, 0.00165828]],
                   [[2.00066752, -0.07950216], [-0.07950216, 0.00797065]],
                   [[1.92352189, -0.01625375], [-0.01625375, 0.00396857]]],
        'weights': [0.33181804, 0.03735827, 0.63082367],
        'means': [[5.55243125, 0.43126973], [4.23310859, 0.23652029], [8.17542632, 0.37681514]]
    },
    'band_11_100k': {
        'covars': [[[1.61821890, -0.01463460], [-0.01463460, 0.00171616]],
                   [[0.11304167, -0.00272711], [-0.00272711, 0.00046977]],
                   [[0.60130715, 0.07630908], [0.07630908, 0.01731200]]],
        'weights': [0.64188765, 0.33551087, 0.02260146],
        'means': [[8.09910916, 0.34808176], [5.87897653, 0.40039126], [3.04820703, 0.36523609]]
    },
    'band_13_100k': {
        'covars': [[[0.69046352, -0.02941656], [-0.02941656, 0.00690064]],
                   [[1.53140194, -0.10541928], [-0.10541928, 0.01241442]],
                   [[1.79001772, -0.00821666], [-0.00821666, 0.00935452]]],
        'weights': [0.40315066, 0.14865173, 0.44819759],
        'means': [[13.28790509, 0.31919000], [8.12878763, 0.27825255], [11.26613003, 0.30308275]]
    },
    'band_14_100k': {
        'covars': [[[0.89688416, -0.02201085], [-0.02201085, 0.00724688]],
                   [[1.63733687, -0.01909433], [-0.01909433, 0.00712516]],
                   [[1.25922692, -0.00337678], [-0.00337678, 0.00882149]]],
        'weights': [0.37656929, 0.29826080, 0.32516989],
        'means': [[11.45370818, 0.37286961], [6.57471355, 0.39778865], [9.63421273, 0.36311396]]
    },
    'band_15_100k': {
        'covars': [[[3.44731105, -0.03238635], [-0.03238635, 0.00374846]],
                   [[0.72145159, -0.00235108], [-0.00235108, 0.00268418]],
                   [[0.09884000, -0.00286876], [-0.00286876, 0.00132928]]],
        'weights': [0.46498946, 0.42828723, 0.10672329],
        'means': [[8.93041727, 0.40742925], [11.56092243, 0.41057917], [6.69532338, 0.46541580]]
    },
    'band_16_100k': {
        'covars': [[[1.76397390, -0.01376685], [-0.01376685, 0.00319572]],
                   [[0.32730832, -0.00791587], [-0.00791587, 0.00180755]],
                   [[5.57730991, -0.09251299], [-0.09251299, 0.01034542]]],
        'weights': [0.66016149, 0.24931746, 0.09052104],
        'means': [[10.18716917, 0.40227328], [6.62455722, 0.44316537], [7.83180471, 0.29695739]]
    },
    'band_17_100k': {
        'covars': [[[0.06183883, -0.00140519], [-0.00140519, 0.00038416]],
                   [[0.87171978, 0.00919799], [0.00919799, 0.00165238]],
                   [[3.11886065, -0.01247575], [-0.01247575, 0.00146553]]],
        'weights': [0.15772833, 0.41647458, 0.42579708],
        'means': [[6.99159464, 0.44552364], [10.82080927, 0.37908653], [8.67604363, 0.40734633]]
    },
    'band_18_100k': {
        'covars': [[[1.67456429, -0.01012906], [-0.01012906, 0.00220842]],
                   [[9.18556225, 0.16745021], [0.16745021, 0.01617754]],
                   [[0.19037901, -0.00298992], [-0.00298992, 0.00054671]]],
        'weights': [0.65247727, 0.07424820, 0.27327452],
        'means': [[9.29175359, 0.38613857], [5.69940613, 0.24712684], [6.55161043, 0.43832811]]
    },
    'band_21_100k': {
        'covars': [[[1.76612722, 0.02006179], [0.02006179, 0.00993266]],
                   [[0.64365083, -0.02357183], [-0.02357183, 0.00595456]],
                   [[2.99639704, -0.19752833], [-0.19752833, 0.01656957]]],
        'weights': [0.41488075, 0.51700960, 0.06810963],
        'means': [[12.29833360, 0.30030826], [14.41785145, 0.31382367], [8.96374021, 0.25598544]]
    },
    'band_22_100k': {
        'covars': [[[0.83824926, -0.02267971], [-0.02267971, 0.00719577]],
                   [[1.04256295, -0.02677641], [-0.02677641, 0.00694632]],
                   [[1.94022808, -0.00990034], [-0.00990034, 0.00743654]]],
        'weights': [0.43526138, 0.14534538, 0.41939322],
        'means': [[12.61725968, 0.37343210], [6.78882021, 0.38622705], [10.56744494, 0.37586089]]
    },
    'band_23_100k': {
        'covars': [[[0.62746616, -0.00374999], [-0.00374999, 0.00264986]],
                   [[0.25384324, -0.00614088], [-0.00614088, 0.00188547]],
                   [[2.42481029, -0.01039917], [-0.01039917, 0.00355939]]],
        'weights': [0.51511487, 0.09965492, 0.38523019],
        'means': [[12.75410647, 0.41461501], [7.00117355, 0.45874521], [10.42009209, 0.40729622]]
    },
    'band_24_100k': {
        'covars': [[[0.74806094, -0.01364663], [-0.01364663, 0.00303552]],
                   [[0.20428875, -0.00677847], [-0.00677847, 0.00175133]],
                   [[2.83900209, -0.03953053], [-0.03953053, 0.00466587]]],
        'weights': [0.47117701, 0.10420357, 0.42461940],
        'means': [[12.30151845, 0.42405475], [6.90729676, 0.46022818], [10.11551064, 0.40268309]]
    },
    'band_25_100k': {
        'covars': [[[0.58647888, -0.00059897], [-0.00059897, 0.00124774]],
                   [[0.10796007, -0.00238635], [-0.00238635, 0.00050911]],
                   [[2.05479725, -0.02745009], [-0.02745009, 0.00255780]]],
        'weights': [0.49996031, 0.11317750, 0.38686218],
        'means': [[12.55820285, 0.42198524], [7.67908501, 0.47046438], [10.29849930, 0.41079115]]
    },
    'band_26_100k': {
        'covars': [[[0.60904453, -0.00459946], [-0.00459946, 0.00126228]],
                   [[0.09645173, -0.00241142], [-0.00241142, 0.00048430]],
                   [[2.41538696, -0.04339498], [-0.04339498, 0.00324163]]],
        'weights': [0.38994184, 0.13416520, 0.47589294],
        'means': [[11.91635352, 0.41791018], [7.34392587, 0.45791563], [10.04275269, 0.39431009]]
    }
}


def k_from_g_log2(n, log2_g, q0, beta):
    shift = 4 if beta > 1 else 0
    return (log2_g * (1. / beta) - np.log2(q0) + 0.5 * np.log2(n + 3) - 0.5 - np.log2(beta) + shift).clip(0)


def rate_est(n, log2_k, f):
    k = np.exp2(log2_k)
    return (0.881 * n / np.log(2)) * (1 + 0.66 * f) * np.log1p((np.log(n * 2 * (0.52 * f + 0.017)) * k * (1. / n)).clip(0)) + 10.4


def GMM(x, covars, weights, means):
    y = None
    for i, w in enumerate(weights):
        mvn = stats.multivariate_normal(mean=means[i], cov=covars[i])
        y_i = w * mvn.pdf(x.T)
        y = y + y_i if i > 0 else y_i
    return y.T


xmin = 0
ymin = 0
xmax = 17
ymax = 1
X, Y = np.mgrid[xmin:xmax:100j, ymin:ymax:100j]
positions = np.vstack([X.ravel(), Y.ravel()])


def gen_plot(ax, fn, n):
    print(fn)
    Z = np.reshape(GMM(positions, **subset3_model[fn]), X.shape)
    log2_qmap = np.log2(qmap)
    non_am = np.array([np.multiply(rate_est(n, k_from_g_log2(n, X, q0, 1), Y), Z).sum() for q0 in qmap])
    am = np.array([np.multiply(rate_est(n, k_from_g_log2(n, X, q0, 1.5), Y), Z).sum() for q0 in qmap])
    am_inv = np.interp(np.log2(non_am), np.log2(am), log2_qmap) - log2_qmap
    print(np.round(np.exp2(am_inv[-290:-10].mean()) * 16))
    ax.set_xlim([2, 17])
    ax.set_ylim([0, 1])
    ax.imshow(np.rot90(Z), extent=[xmin, xmax, ymin, ymax], aspect='auto')


f, axarr = plt.subplots(4, 5, sharex=True, sharey=True)
gen_plot(axarr[0, 0], 'band_3_100k', 15)
gen_plot(axarr[0, 1], 'band_4_100k', 8)
gen_plot(axarr[0, 2], 'band_5_100k', 32)
gen_plot(axarr[0, 3], 'band_7_100k', 15)
gen_plot(axarr[0, 4], 'band_8_100k', 8)
gen_plot(axarr[1, 0], 'band_9_100k', 32)
gen_plot(axarr[1, 1], 'band_10_100k', 32)
gen_plot(axarr[1, 2], 'band_11_100k', 128)
gen_plot(axarr[1, 3], 'band_13_100k', 15)
gen_plot(axarr[1, 4], 'band_14_100k', 8)
gen_plot(axarr[2, 0], 'band_15_100k', 32)
gen_plot(axarr[2, 1], 'band_16_100k', 32)
gen_plot(axarr[2, 2], 'band_17_100k', 128)
gen_plot(axarr[2, 3], 'band_18_100k', 128)
gen_plot(axarr[2, 4], 'band_21_100k', 15)
gen_plot(axarr[3, 0], 'band_22_100k', 8)
gen_plot(axarr[3, 1], 'band_23_100k', 32)
gen_plot(axarr[3, 2], 'band_24_100k', 32)
gen_plot(axarr[3, 3], 'band_25_100k', 128)
gen_plot(axarr[3, 4], 'band_26_100k', 128)
plt.show()
